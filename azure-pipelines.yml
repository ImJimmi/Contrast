# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
  #=============================================================================
  - job: Windows
    pool:
      vmImage: 'windows-latest'

    steps:
    - bash: |
        TAG=$(git describe --abbrev=0)
        echo "##vso[task.setvariable variable=version_tag;]$TAG"
      name: setVersionTag

    - task: CmdLine@2
      displayName: "Task 1: Clone JUCE"
      inputs:
        script: |
          echo "Cloning JUCE..."
          git clone https://github.com/juce-framework/JUCE.git

    - task: MSBuild@1
      displayName: "Task 2: Build Projucer"
      inputs:
        solution: 'JUCE\extras\Projucer\Builds\VisualStudio2019\Projucer.sln'
        msbuildArchitecture: 'x64'
        platform: 'x64'
        configuration: 'Release'

    - task: CmdLine@2
      displayName: "Task 3: Re-save .jucer Files"
      inputs:
        script: |
          echo "Moving Projucer.exe..."
          move JUCE\extras\Projucer\Builds\VisualStudio2019\x64\Release\App\Projucer.exe .

          echo "Setting Projucer search paths..."
          Projucer.exe --set-global-search-path windows defaultJuceModulePath "%cd%\JUCE\modules"

          echo "Deleting unneeded JUCE folders..."
          rd JUCE\extras /s /q
          rd JUCE\examples /s /q

          echo "Re-saving .jucer files..."
          for /r %%v in (*.jucer) do Projucer.exe --resave "%%v"

    - task: MSBuild@1
      displayName: "Task 4: Build x64"
      inputs:
        solution: '**\*.sln'
        msbuildArchitecture: 'x64'
        platform: 'x64'
        configuration: 'Release64'

    - task: MSBuild@1
      displayName: "Task 5: Build Win32"
      inputs:
        solution: '**\*.sln'
        platform: 'Win32'
        configuration: 'ReleaseWin32'

    - task: CmdLine@2
      displayName: "Task 6: Move Binaries"
      inputs:
        script: |
          mkdir $(Build.ArtifactStagingDirectory)\Contrast_$(version_tag)_Windows

          for /r %%f in (*.vst3) do (
            echo "Moving file %%f..."
            move %%f "$(Build.ArtifactStagingDirectory)\Contrast_$(version_tag)_Windows"
          )

    - task: PowerShell@2
      displayName: "Task 7: Compress Binaries"
      inputs:
        targetType: 'inline'
        script: Compress-Archive -Path $(Build.ArtifactStagingDirectory)\* -DestinationPath $(Build.ArtifactStagingDirectory)\Contrast_$(version_tag)_Windows.zip

    - task: GitHubRelease@1
      displayName: "Task 8: Upload to GitHub"
      inputs:
        gitHubConnection: 'GitHub PAT'
        repositoryName: 'ImJimmi/Contrast'
        action: 'edit'
        target: '$(Build.SourceVersion)'
        tag: '$(version_tag)'
        tagSource: 'gitTag'
        releaseNotesSource: 'inline'
        releaseNotesInline: 'Release'
        assets: '$(Build.ArtifactStagingDirectory)\*.zip'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        assetUploadMode: 'replace'

  #=============================================================================
  - job: MacOS
    pool:
      vmImage: 'macOS-latest'

    steps:
    - bash: |
        TAG=$(git describe --abbrev=0)
        echo "##vso[task.setvariable variable=version_tag;]$TAG"
      name: setVersionTag

    - task: CmdLine@2
      displayName: "Task 1: Clone JUCE"
      inputs:
        script: |
          echo "Cloning JUCE..."
          git clone https://github.com/juce-framework/JUCE.git $(Pipeline.Workspace)/JUCE

    - task: Xcode@5
      displayName: "Task 2: Build Projucer"
      inputs:
        actions: 'build'
        configuration: 'Release'
        sdk: 
        xcWorkspacePath: '$(Pipeline.Workspace)/JUCE/extras/Projucer/Builds/MacOSX/Projucer.xcodeproj/project.xcworkspace'
        packageApp: false

    - task: CmdLine@2
      displayName: "Task 3: Re-save .jucer Files"
      inputs:
        script: |
          echo "Moving Projucer..."
          mv $(Pipeline.Workspace)/JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app $(Pipeline.Workspace)/JUCE/Projucer.app

          echo "Changing Projucer permissions..."
          chmod +x $(Pipeline.Workspace)/JUCE/Projucer.app/Contents/MacOS/Projucer

          echo "Setting Projucer paths..."
          $(Pipeline.Workspace)/JUCE/Projucer.app/Contents/MacOS/Projucer --set-global-search-path osx defaultJuceModulePath "$(Pipeline.Workspace)/JUCE/modules"

          echo "Re-saving .jucer files..."
          for file in $(find $PWD -name '*.jucer'); do $(Pipeline.Workspace)/JUCE/Projucer.app/Contents/MacOS/Projucer --resave $file; done

    - task: CmdLine@2
      displayName: "Task 4: Xcode Build"
      inputs:
        script: |
          mkdir $(Build.ArtifactStagingDirectory)/Contrast_$(version_tag)_MacOS
          rm -r build

          for pluginName in */ ; do
            results=(`find "$(PWD)/${plugin}" -name '*.xcodeproj'`)
            if [ ${#result[@]} -gt 0 ] then
              echo "Building Xcode Project ${pluginName%/}..."
              xcodebuild -project "${pluginName}Builds/MacOSX/${pluginName%/}.xcodeproj" -target "${pluginName%/} - All" -configuration "Release"

              mv /Users/runner/Library/Audio/Plug-Ins/Components/${pluginName%/}.component $(Build.ArtifactStagingDirectory)/Contrast_$(version_tag)_MacOS/${pluginName%/}.component
              mv /Users/runner/Library/Audio/Plug-Ins/VST3/${pluginName%/}.vst3 $(Build.ArtifactStagingDirectory)/Contrast_$(version_tag)_MacOS/${pluginName%/}.vst3
            fi
          done

    - task: PowerShell@2
      displayName: "Task 5: Compress Binaries"
      inputs:
        targetType: 'inline'
        script: Compress-Archive -Path $(Build.ArtifactStagingDirectory)/* -DestinationPath $(Build.ArtifactStagingDirectory)\Contrast_$(version_tag)_MacOS.zip

    - task: GitHubRelease@1
      displayName: "Task 6: Upload to GitHub"
      inputs:
        gitHubConnection: 'GitHub PAT'
        repositoryName: 'ImJimmi/Contrast'
        action: 'edit'
        target: '$(Build.SourceVersion)'
        tag: '$(version_tag)'
        tagSource: 'gitTag'
        releaseNotesSource: 'inline'
        releaseNotesInline: 'Release'
        assets: '$(Build.ArtifactStagingDirectory)/*.zip'
        assetUploadMode: 'replace'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
